{"version":3,"sources":["registerServiceWorker.js","components/BookList/styles.js","components/BookList/BookList.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","Container","styled","div","_templateObject","Intro","_templateObject2","IntroTitle","h1","_templateObject3","IntroSentence","p","_templateObject4","IntroDivider","_templateObject5","BookContainer","_templateObject6","Book","_templateObject7","BookImage","img","_templateObject8","BookSynopsis","_templateObject9","apiUrl","process","API_URL","strapi","Strapi","App","books","request","data","query","response","this","setState","_context","t0","react_default","a","createElement","map","book","key","_id","src","concat","cover","url","synopsis","Component","ReactDOM","render","BrowserRouter","Fragment","Switch","Route","component","BookList","exact","path","document","getElementById","URL","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sNAUMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,ugEC7E1D,IAAMC,EAAYC,IAAOC,IAAVC,KAOTC,EAAQH,IAAOC,IAAVG,KAKLC,EAAaL,IAAOM,GAAVC,KAQVC,EAAgBR,IAAOS,EAAVC,KAMbC,EAAeX,IAAOC,IAAVW,KAOZC,EAAgBb,IAAOC,IAAVa,KAQbC,EAAOf,IAAOC,IAAVe,KAaJC,EAAYjB,IAAOkB,IAAVC,KASTC,EAAepB,IAAOC,IAAVoB,sBC5DnBC,EAASC,8CAAYC,SAAW,0CAChCC,EAAS,IAAIC,IAAOJ,GAyDXK,6MAtDblC,MAAQ,CACNmC,MAAO,8NAKkBH,EAAOI,QAAQ,OAAQ,WAAY,CACxDC,KAAM,CACJC,MAAK,kMAFHC,SAeNC,KAAKC,SAAS,CAAEN,MAAOI,EAASF,KAAKF,wDAErCjC,QAAQG,MAARqC,EAAAC,gJAIK,IACCR,EAAUK,KAAKxC,MAAfmC,MAGR,OACES,EAAAC,EAAAC,cAACxC,EAAD,KAEEsC,EAAAC,EAAAC,cAACpC,EAAD,KACEkC,EAAAC,EAAAC,cAAClC,EAAD,kBACAgC,EAAAC,EAAAC,cAAC/B,EAAD,oEACA6B,EAAAC,EAAAC,cAAC5B,EAAD,OAGF0B,EAAAC,EAAAC,cAAC1B,EAAD,KACGe,EAAMY,IAAI,SAAAC,GAAI,OACbJ,EAAAC,EAAAC,cAACxB,EAAD,CAAM2B,IAAMD,EAAKE,KACfN,EAAAC,EAAAC,cAACtB,EAAD,CAAW2B,IAAG,GAAAC,OAAMJ,EAAKK,MAAMC,OAC/BV,EAAAC,EAAAC,cAACnB,EAAD,KAAgBqB,EAAKO,sBA7CjBC,aCWlBC,IAASC,OAAOd,EAAAC,EAAAC,cAXH,kBAETF,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACIf,EAAAC,EAAAC,cAACF,EAAAC,EAAMe,SAAP,KACIhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAOC,UAAWC,EAAUC,OAAK,EAACC,KAAK,UAMvC,MAAUC,SAASC,eAAe,SHCnC,WACb,GAA6C,kBAAmB7E,UAAW,CAGzE,GADkB,IAAI8E,IAAIvC,GAAwB7C,OAAOC,UAC3CoF,SAAWrF,OAAOC,SAASoF,OAIvC,OAGFrF,OAAOsF,iBAAiB,OAAQ,WAC9B,IAAMjF,EAAK,GAAA8D,OAAMtB,GAAN,sBAEP/C,GAiDV,SAAiCO,GAE/BkF,MAAMlF,GACHI,KAAK,SAAA6C,GAGkB,MAApBA,EAASkC,SACuD,IAAhElC,EAASmC,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CrF,UAAUC,cAAcqF,MAAMnF,KAAK,SAAAC,GACjCA,EAAamF,aAAapF,KAAK,WAC7BT,OAAOC,SAAS6F,aAKpB1F,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEArEA6E,CAAwB1F,GAIxBC,UAAUC,cAAcqF,MAAMnF,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,MG5BxB2F","file":"static/js/main.d28ffc73.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import styled from '@emotion/styled'\n\nexport const Container = styled.div`\n    width: 92%;\n    max-width: 140rem;\n    margin: 4% auto;\n    position: relative;\n`\n\nexport const Intro = styled.div`\n    width: 92%;\n    max-width: 140rem;\n`\n\nexport const IntroTitle = styled.h1`\n    color: #F4D35E;\n    font-family: 'Righteous';\n    letter-spacing: 0.23rem;\n    font-size: 1.6rem;\n    margin-bottom: 2rem;\n`\n\nexport const IntroSentence = styled.p`\n    font-size: 42px;\n    font-family: 'Patua One', sans-serif;\n    line-height: 1.1;\n    color: #FCFCFC;\n`\nexport const IntroDivider = styled.div`\n    height: 2px;\n    width: 60px;\n    background: #FFF;\n    margin-top: 2rem;\n`\n\nexport const BookContainer = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-evenly;\n    margin-top: 3rem;\n    width: 100%;\n`\n\nexport const Book = styled.div`\n    width: 20%;\n    position: relative:\n    border-radius: 3rem 3rem 0.4rem 0.4rem;\n    margin-right: 3rem;\n    margin-bottom: 12rem;\n\n    @media (max-width: 600px) {\n        width: 50%;\n        height: 100%;\n    }\n`\n\nexport const BookImage = styled.img`\n    box-shadow: #333 -0.7rem 1.0rem 0.3rem;\n    width: 100%;\n    height: 75%;\n    border-radius: 2rem;\n    background: #F4D35E;\n\n\n`\nexport const BookSynopsis = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 1.6rem 2.2rem;\n    height: 36%;\n    font-family: 'Patua One';\n    font-size: 1.2rem;\n    color: #FFF;\n    background: #0094FF; \n    border-radius: 2rem;\n    box-shadow: #333 -0.7rem 1.0rem 0.3rem;\n    margin-top: 1rem;\n\n    @media (max-width: 700px) {\n        font-size: 0.33rem;\n    }\n`","import React, { Component } from 'react'\nimport '../Global.css'\nimport { Container, Intro, IntroTitle, IntroSentence, IntroDivider, BookContainer, Book, BookImage, BookSynopsis } from './styles'\nimport Strapi from 'strapi-sdk-javascript/build/main'\n\nconst apiUrl = process.env.API_URL || 'https://limitless-journey.herokuapp.com'\nconst strapi = new Strapi(apiUrl)\n\nclass App extends Component {\n  state = {\n    books: []\n  }\n\n  async componentDidMount() {\n    try {\n      const response = await strapi.request('POST', '/graphql', {\n        data: {\n          query: `query {\n            books {\n              _id\n              title\n              synopsis\n              cover {\n                url\n              }\n            }\n          }`\n        }\n      });\n\n      this.setState({ books: response.data.books });\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  render() {\n    const { books } = this.state;\n\n\n    return (\n      <Container>\n\n        <Intro>\n          <IntroTitle>BOOKSTAND</IntroTitle>\n          <IntroSentence>Always reading; always learning; always expanding your mind</IntroSentence>\n          <IntroDivider></IntroDivider>\n        </Intro>\n        \n        <BookContainer>\n          {books.map(book => (\n            <Book key={ book._id }>\n              <BookImage src={ `${book.cover.url}` }></BookImage>\n              <BookSynopsis>{ book.synopsis }</BookSynopsis>\n            </Book> \n          ))}\n        </BookContainer>\n\n      </Container>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport registerServiceWorker from './registerServiceWorker';\n\nimport BookList from './components/BookList/BookList';\n\n\nconst Root = () => (\n    \n    <Router>\n        <React.Fragment>\n            <Switch>\n                <Route component={BookList} exact path=\"/\"></Route>\n            </Switch>\n        </React.Fragment>\n    </Router>\n)\n\nReactDOM.render(<Root />, document.getElementById('root'));\nregisterServiceWorker();\n\n\n//Hot reloading - allows page to be updated without a full page reload\nif (module.hot) {\n    module.hot.accept();\n}\n"],"sourceRoot":""}